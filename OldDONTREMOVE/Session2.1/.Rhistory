#WW sd as tibble
ww.sd <- apply(ww.pred,c(2,3),sd)
colnames(ww.sd) <- dimnames(ww.pred)[[3]]
ww.sd <- as_tibble(ww.sd)
ww.sd$LTLA <- dimnames(ww.pred)[[2]]
dim(ww.pred)
ww.pp <- array(NA, dims=dim(ww.pred))
ww.pp <- array(NA, dim=dim(ww.pred))
dim(ww.pp)
#Calculate posterior probability
ww.pp <- array(NA, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
if(ww.pred[,i,j+2]>ww.pred[,i,j+1] & ww.pred[,i,j+1]>ww.pred[,i,j]){ww.pred[,i,j+2]==1}{ww.pred[,i,j+2]==0}
for(i in 1:309){
for(j in 1:39){
if(ww.pred[,i,j+2]>ww.pred[,i,j+1] & ww.pred[,i,j+1]>ww.pred[,i,j])(ww.pred[,i,j+2]==1) else(ww.pred[,i,j+2]==0)
}
}
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if(ww.pred[k,i,j+2]>ww.pred[k,i,j+1] & ww.pred[k,i,j+1]>ww.pred[k,i,j])(ww.pred[k,i,j+2]==1) else(ww.pred[k,i,j+2]==0)
}
}
}
ww.pp
#Calculate posterior probability
ww.pp <- array(NA, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if_else(ww.pred[k,i,j+2]>ww.pred[k,i,j+1] && ww.pred[k,i,j+1]>ww.pred[k,i,j], ww.pred[k,i,j+2]==1, ww.pred[k,i,j+2]==0)
}
}
}
ww.pp[1:5,1:5,1:5]
i=1
j=1
k=1
ww.pred[k,i,j+2]>ww.pred[k,i,j+1] && ww.pred[k,i,j+1]>ww.pred[k,i,j]
ww.pred
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if_else(ww.pred[k,i,j+2]>ww.pred[k,i,j+1] && ww.pred[k,i,j+1]>ww.pred[k,i,j], ww.pp[k,i,j+2]==1, ww.pp[k,i,j+2]==0)
}
}
}
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if_else(ww.pred[k,i,j+2]>ww.pred[k,i,j+1] && ww.pred[k,i,j+1]>ww.pred[k,i,j], ww.pp[k,i,j]==1, ww.pp[k,i,j]==0)
}
}
}
ww.pp[1:5,1:5,1:5]
ww.pred[1:5,1:5,1:5]
k
k=1
i=1
j=1
ww.pp[1,1,1]
if_else(ww.pred[k,i,j+2]>ww.pred[k,i,j+1] && ww.pred[k,i,j+1]>ww.pred[k,i,j], ww.pp[k,i,j]==1, ww.pp[k,i,j]==0)
ww.pred
#Calculate posterior probability
ww.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (ww.pred[k,i,j+2]>ww.pred[k,i,j+1] && ww.pred[k,i,j+1]>ww.pred[k,i,j]){ww.pp[k,i,j]==1}
}
}
}
ww.pp[1,1,1]
ww.pp[1,1,2]
ww.pp[1,1]
ww.pp[1,1,]
ww.pp[1,2,]
ww.pp.mean <- apply(ww.pp,c(2,3),sum)/200
ww.pp.mean
#Calculate posterior probability
ww.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (ww.pred[k,i,j+2]>ww.pred[k,i,j+1] & ww.pred[k,i,j+1]>ww.pred[k,i,j]){ww.pp[k,i,j]==1}
}
}
}
ww.pp.mean <- apply(ww.pp,c(2,3),sum)/200
ww.pp.mean
ww.pred[1,]
ww.pred[1,,]
k=1
j=2
i=1
ww.pred[k,i,j]
ww.pred[k,i,j+1]
ww.pred[k,i,j+2]
ww.pred[k,i,j+2]>ww.pred[k,i,j+1] & ww.pred[k,i,j+1]>ww.pred[k,i,j]
ww.pp[k,i,j]==1
ww.pp[k,i,j]=1
ww.pp[k,i,j]
#Calculate posterior probability
ww.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (ww.pred[k,i,j+2]>ww.pred[k,i,j+1] & ww.pred[k,i,j+1]>ww.pred[k,i,j]){ww.pp[k,i,j]=1}
}
}
}
ww.pp.mean <- apply(ww.pp,c(2,3),sum)/200
WW.PP.MEAN
ww.pp.mean
ls()
dprev
#######
#Calculate posterior probability for the prevalence
pred.pp <- array(0, dim=c(200,309,41))
#######
#Calculate posterior probability for the prevalence
pred.pp <- array(0, dim=c(200,309,41))
for(i in 1:309){
for(j in 1:41){
pred.pp[,i,j] <- rnorm(200,dprev$LFD2_mn,sd=dprev$LFD2_sd)
}
}
pred.pp[1:5,1:5,1:5]
#Generate a sample of 200 values for each LTLA x week log-prevalence estimate
pred.sample <- array(0, dim=c(200,309,41))
for(i in 1:309){
for(j in 1:41){
pred.sample[,i,j] <- rnorm(200,dprev$LFD2_mn,sd=dprev$LFD2_sd)
}
}
#Generate a sample of 200 values for each LTLA x week log-prevalence estimate
prev.sample <- array(0, dim=c(200,309,41))
for(i in 1:309){
for(j in 1:41){
prev.sample[,i,j] <- rnorm(200,dprev$LFD2_mn,sd=dprev$LFD2_sd)
}
}
pred.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (prev.sample[k,i,j+2]>prev.sample[k,i,j+1] & prev.sample[k,i,j+1]>prev.sample[k,i,j]){pred.pp[k,i,j]=1}
}
}
}
prev.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (prev.sample[k,i,j+2]>prev.sample[k,i,j+1] & prev.sample[k,i,j+1]>prev.sample[k,i,j]){prev.pp[k,i,j]=1}
}
}
}
prev.pp
prev.pp.mean <- apply(prev.pp,c(2,3),sum)/200
prev.pp.mean
ls()
head(dprev)
ww.pred
dpred$LAD21CD
dprev$LAD21CD
unique(dprev$LAD21CD)
colnames(ww.pred)[2]
colnames(ww.pred)
prev.pp.mean$LAD21CD <- dprev$LAD21CD
ww.pp.mean$LAD21CD <- colnames(ww.pred)
dim(ww.pp.mean)
ww.pp.mean
ww.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (ww.pred[k,i,j+2]>ww.pred[k,i,j+1] & ww.pred[k,i,j+1]>ww.pred[k,i,j]){ww.pp[k,i,j]=1}
}
}
}
ww.pp.mean <- apply(ww.pp,c(2,3),sum)/200
ww.pp.mean <- as_tibble(ww.pp.mean)
ww.pp.mean
ww.pp.mean$LAD21CD <- colnames(ww.pred)
ww.pp.mean
prev.pp <- array(0, dim=c(200,309,41-2))
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (prev.sample[k,i,j+2]>prev.sample[k,i,j+1] & prev.sample[k,i,j+1]>prev.sample[k,i,j]){prev.pp[k,i,j]=1}
}
}
}
for(i in 1:309){
for(j in 1:39){
for(k in 1:200){
if (prev.sample[k,i,j+2]>prev.sample[k,i,j+1] & prev.sample[k,i,j+1]>prev.sample[k,i,j]){prev.pp[k,i,j]=1}
}
}
}
prev.pp.mean <- apply(prev.pp,c(2,3),sum)/200
prev.pp.mean <- apply(prev.pp,c(2,3),sum)/200
prev.pp.mean <- as_tibble(prev.pp.mean)
prev.pp.mean$LAD21CD <- dprev$LAD21CD
length(dprev$LFD2_mn)
dprev
#######
#For debiased prevalence I generate a sample of 200 values for each LTLA x week log-prevalence estimate
prev.sample <- array(0, dim=c(10395,200))
for(j in 1:10395){
prev.sample[j,] <- rnorm(200,dprev$LFD2_mn[j],sd=dprev$LFD2_sd[j])
}
prev.sample[1:5,1:10]
xx <- array(0, dim=c(315,200,41))
for(i in 1:33){
xx[,,i]<-prev.sample[time_index_ww==i,]
}
for(i in 1:33){
xx[,,i]<-prev.sample[dprev$time_index_ww==i,]
}
xx
prev.pp <-   array(0, dim=c(315,200,41-2))
xx <- array(0, dim=c(315,200,33))
for(i in 1:33){
xx[,,i]<-prev.sample[dprev$time_index_ww==i,]
}
prev.pp <-   array(0, dim=c(315,200,33-2))
for(i in 1:315){
for(j in 1:31){
for(k in 1:200){
if (prev.sample[i,k,j+2]>prev.sample[i,k,j+1] & prev.sample[i,k,j+1]>prev.sample[i,k,j]){prev.pp[i,k,j]=1}
}
}
}
prev.pp <-   array(0, dim=c(315,200,33-2))
for(i in 1:315){
for(j in 1:31){
for(k in 1:200){
if (xx[i,k,j+2]>xx[i,k,j+1] & xx[i,k,j+1]>xx[i,k,j]){prev.pp[i,k,j]=1}
}
}
}
prev.pp.mean <- apply(prev.pp,c(1,3),sum)/200
prev.pp.mean
prev.pp.mean <- as_tibble(prev.pp.mean)
prev.pp.mean$LAD21CD <- dprev$LAD21CD
prev.pp.mean$LAD21CD <- unique(dprev$LAD21CD)
help("cat")
prev.pp.cat <- apply(prev.pp.mean[,2:34],2,function(x, cut(x, breaks, include.lowest=TRUE)))
breaks <- c(0,0.2,0.8,1)
prev.pp.cat <- prev.pp.mean
prev.pp.cat <- apply(prev.pp.mean[,2:34],2,function(x) cut(x, breaks, include.lowest=TRUE))
breaks <- c(0,0.2,0.8,1)
prev.pp.cat <- prev.pp.mean
prev.pp.cat <- apply(prev.pp.mean[,2:32],2,function(x) cut(x, breaks, include.lowest=TRUE))
prev.pp.mean
prev.pp.cat <- prev.pp.mean
prev.pp.cat <- apply(prev.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
prev.pp.cat
prev.pp.cat$LAD21CD <- unique(dprev$LAD21CD)
prev.pp.cat <- prev.pp.mean
prev.pp.cat[,1:31] <- apply(prev.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
prev.pp.cat
breaks <- c(0,0.2,0.8,1)
ww.pp.cat <- ww.pp.mean
ww.pp.cat[,1:31] <- apply(ww.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
ww.pp.cat
ls()
ww.pred
comnames(ww.pred)[3]
colnames(ww.pred)[3]
names(ww.pred)[3]
names(ww.pred)[[3]]
colnames(ww.pred)[[3]]
names(ww.pred)
rownames(ww.pred)
dimnames(ww.pred)[[3]]
colnames(prev.pp.cat) <- dimnames(ww.pred)[[3]][1:33]
colnames(ww.pp.cat) <- dimnames(ww.pred)[[3]]
#Join the shp file to map
LTLAmap <- left_join(ww.pp.cat, LTLA, by="LAD21CD")
LTLA
ww.pp.cat
ww.pp.cat <- ww.pp.mean
ww.pp.cat[,1:31] <- apply(ww.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
ww.pp.cat
colnames(ww.pp.cat)[1:39] <- dimnames(ww.pred)[[3]]
breaks <- c(0,0.2,0.8,1)
ww.pp.cat <- ww.pp.mean
ww.pp.cat[,1:31] <- apply(ww.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
colnames(ww.pp.cat)[1:31] <- dimnames(ww.pred)[[3]]
breaks <- c(0,0.2,0.8,1)
ww.pp.cat <- ww.pp.mean[,1:31]
ww.pp.cat[,1:31] <- apply(ww.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
colnames(ww.pp.cat)[1:31] <- dimnames(ww.pred)[[3]]
ww.pp.cat <- ww.pp.mean[,1:32]
ww.pp.cat[,1:31] <- apply(ww.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
colnames(ww.pp.cat)[1:31] <- dimnames(ww.pred)[[3]]
ww.pp.cat <- ww.pp.mean[,1:32]
ww.pp.cat
breaks <- c(0,0.2,0.8,1)
ww.pp.cat <- data.frame(ww.pp.mean[,40],ww.pp.mean[,1:31])
ww.pp.cat
ww.pp.cat[,2:32] <- apply(ww.pp.mean[,2:32],2,function(x) cut(x, breaks, include.lowest=TRUE))
colnames(ww.pp.cat)[2:32] <- dimnames(ww.pred)[[3]]
dim(ww.pp.cat)
colnames(ww.pp.cat)[2:32] <- dimnames(ww.pred)[[3]][2:33]
colnames(ww.pp.cat)[2:32] <- dimnames(ww.pred)[[3]][3:33]
ww.pp.cat
prev.pp.cat
prev.pp.mean
prev.pp.cat <- data.frame(prev.pp.mean[,32],prev.pp.mean[,1:31])
prev.pp.cat[,2:32] <- apply(prev.pp.mean[,2:32],2,function(x) cut(x, breaks, include.lowest=TRUE))
prev.pp.cat
prev.pp.cat[,2:32] <- apply(prev.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
colnames(prev.pp.cat) <- dimnames(ww.pred)[[3]][1:33]
ww.pred
dimnames(ww.pred)[[3]][3:33]
prev.pp.cat
dim(prev.pp.cat)
colnames(prev.pp.cat) <- dimnames(ww.pred)[[3]][3:33]
#Join the shp file to map
LTLAmap <- left_join(ww.pp.cat, LTLA, by="LAD21CD")
LTLAmap <- left_join(pred.pp.cat,LTLAmap,by="LAD21CD")
LTLAmap <- left_join(prev.pp.cat,LTLAmap,by="LAD21CD")
prev.pp.cat
prev.pp.cat <- data.frame(prev.pp.mean[,32],prev.pp.mean[,1:31])
prev.pp.cat[,2:32] <- apply(prev.pp.mean[,1:31],2,function(x) cut(x, breaks, include.lowest=TRUE))
colnames(prev.pp.cat)[2:32] <- dimnames(ww.pred)[[3]][3:33]
prev.pp.cat
LTLAmap <- left_join(prev.pp.cat,LTLAmap,by="LAD21CD")
LTLAmap
library(biscale)
remotes::install_github("chris-prener/biscale")
library(biscale)
help("bi_class")
LTLAmap <- left_join(prev.pp.mean, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp.mean ,LTLAmap,by="LAD21CD")
library(biscale)
data <- bi_class(stl_race_income, x = pctWhite, y = medInc, style = "quantile", dim = 3)
LTLAmap
library(biscale)
data <- bi_class(LTLAmap, x = V1.x, y = V1.y, style = "quantile", dim = 3)
data
data$bi_class
LTLA$V1.y
LTLA$V2.y
data$V1.y
ww.pp.mean[,1]
View(ww.pp.mean)
breaks <- c(0,0.2,0.8,1)
prev.pp <- data.frame(prev.pp.mean[,32],prev.pp.mean[,1:31])
colnames(prev.pp)[2:32] <- dimnames(ww.pred)[[3]][3:33]
ww.pp <- data.frame(ww.pp.mean[,40],ww.pp.mean[,1:31])
colnames(ww.pp)[2:32] <- dimnames(ww.pred)[[3]][3:33]
ww.pp
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
library(biscale)
data <- bi_class(LTLAmap, x = V1.x, y = V1.y, style = "quantile", dim = 3)
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
library(biscale)
data <- bi_class(LTLAmap, x = V1.x, y = V1.y, style = "quantile", dim = 3)
LTLAmap
library(biscale)
data <- bi_class(LTLAmap, x = 2021-06-14.x, y = 2021-06-14.y, style = "quantile", dim = 3)
library(biscale)
data <- bi_class(LTLAmap, x = "2021-06-14.x", y = "2021-06-14.y", style = "quantile", dim = 3)
library(biscale)
data <- bi_class(LTLAmap, x = 2021-06-14.x, y = 2021-06-14.y, style = "quantile", dim = 3)
library(biscale)
data <- bi_class(LTLAmap, x = LTLAmap[,2], y = LTLAmap[,33], style = "quantile", dim = 3)
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
LTLAmap
LTLA <- st_read("LTLA/LAD_MAY_2021_UK_BFE_V2.shp")
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
LTLAmap
prev.pp.mean[,32]
ww.pp.mean
ww.pp.mean$LAD21CD
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap
LTLAmap.ww <- left_join(ww.pp ,LTLA,by="LAD21CD")
LTLAmap.ww
LTLA.final <- inner_join(LTLAmap.prev,LTLAmap.ww,by="LAD21CD")
LTLAmap.prev <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap.ww <- left_join(ww.pp ,LTLA,by="LAD21CD")
LTLA.final <- inner_join(LTLAmap.prev,LTLAmap.ww,by="LAD21CD")
LTLA.final
library(biscale)
data <- bi_class(LTLAmap, x = LTLAmap[,2], y = LTLAmap[,33], style = "quantile", dim = 3)
Now that we have the posterior probability of increments for the prevalence and for wastewater we can prepare a table/map. Create the categories
library(biscale)
data <- bi_class(LTLA.final, x = LTLA.final[,2], y = LTLA.final[,33], style = "quantile", dim = 3)
library(renderthis)
df<- data.frame(theta=c(0.1,0.4,0.8), p=c(0.2,0.5,0.3), post=c(0,0.99,0.01), lik=c(0.0000064,0.117,0.002))
df_nn <- c()df[,2]*df[4]
df_nn <- df[,2]*df[4]
df_nn
0.4*0.117
df[,2]%*%df[4]
df_nn <- df[,2]*df[,4]
df_nn
df[,2]%*%df[,4]
df[,2]
df[,4]
df[1,2]*df[1,4]
df[2,2]*df[2,4]
a=9.2;b=13.8
#Data
y=15; n=20
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(a = a, b = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
library(ggplot2)
a=9.2;b=13.8
#Data
y=15; n=20
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(a = a, b = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
p1
help(stat_function)
help(dbeta)
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
p1
a
b
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = a, sd = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
p1
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1
help(dbinom)
p_temp <- dbinom(15,20,seq(0,1,0.01))
p_temp
plot(p_temp)
2 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbinom, n = 101, args = list(x=y,size = n)) + ylab("") +
scale_y_continuous(breaks = NULL)
p2 <- ggplot(aes(seq(0, 1,0.01)), p_temp) +
ylab("") + scale_y_continuous(breaks = NULL)
p2 <- ggplot(aes(seq(0, 1,0.01), p_temp)) +
ylab("") + scale_y_continuous(breaks = NULL)
ggplot() + aes(seq(0, 1,0.01), p_temp)
ggplot() + aes(seq(0, 1,0.01), p_temp)+ggline()
ggplot() + aes(seq(0, 1,0.01), p_temp)+gg_line()
ggplot() + aes(seq(0, 1,0.01), p_temp)+gg.line()
help(ggline)
ggplot() + aes(seq(0, 1,0.01), p_temp)+geom_line()
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab(expression(p(theta))) + scale_y_continuous(breaks = NULL)
p_temp <- dbinom(15,20,seq(0,1,0.01))
x<-seq(0,1,0.01)
p2 <- ggplot() + aes(seq(0, 1,0.01), p_temp)+geom_line() + ylab(paste(expression("L(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
p3 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a+15, shape2 = b+5)) + ylab(paste(expression("p(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
grid.arrange(p2,p1,p3,nrow=3)
#library(cowplot)
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab(expression(p(theta))) + scale_y_continuous(breaks = NULL)
p_temp <- dbinom(15,20,seq(0,1,0.01))
x<-seq(0,1,0.01)
p2 <- ggplot() + aes(seq(0, 1,0.01), p_temp)+geom_line() + ylab(paste(expression("L(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
p3 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a+15, shape2 = b+5)) + ylab(paste(expression("p(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
#grid.arrange(p1,p2,p3,nrow=3)
p1
p2
p3
install.packages("tikzDevice")
install.packages("magick")
library(kableExtra)
df<- data.frame(theta=c(0.1,0.4,0.8), p=c(0.2,0.5,0.3), post=c(0,0.99,0.01), lik=c(0.0000064,0.117,0.002))
kable(df[1:3], col.names = c("$\\theta$", "$p(\\theta)$", "$p(\\theta \\mid y=10)$"), "pipe", escape = F, caption = "Prior and posterior ",  booktabs=TRUE) %>%  row_spec(1, bold = TRUE, italic = TRUE, background="green") %>% column_spec(1:3,border_left = TRUE, border_right = TRUE)
kable(df[1:3], col.names = c("$\\theta$", "$p(\\theta)$", "$p(\\theta \\mid y=10)$"), "pipe", escape = F, caption = "Prior and posterior ",  booktabs=TRUE) %>%  row_spec(1, bold = TRUE, italic = TRUE, background="green") %>% column_spec(1:3,border_left = TRUE, border_right = TRUE) %>% kable_styling(latex_options = "hold_position")
kable(df[1:3])
kable(df[1:3]) %>% kable_classic()
df[1:3]
help("kable_styling")
help("column_spec")
setwd("~/Dropbox/Bayes_Spatial_2023/Material/Session2.1")
library(renderthis)
to_pdf(from = "index.html", partial_slides = TRUE)
0.06*0.94/0.025
1.256*0.06
0.075*0.94/0.06
2500+1-18
2500+1.175-18
18.075/(18.075+2483.175)
18/2500
0.1*0.9/0.025
2.6*0.1
0.26*0.9/0.1
2486+2.34
18.26/(18.26+2488.34)
0.26/(0.26+2.34)
