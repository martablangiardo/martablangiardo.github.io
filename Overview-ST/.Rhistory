LTLAmap <- left_join(ww.pp.mean ,LTLAmap,by="LAD21CD")
library(biscale)
data <- bi_class(stl_race_income, x = pctWhite, y = medInc, style = "quantile", dim = 3)
LTLAmap
library(biscale)
data <- bi_class(LTLAmap, x = V1.x, y = V1.y, style = "quantile", dim = 3)
data
data$bi_class
LTLA$V1.y
LTLA$V2.y
data$V1.y
ww.pp.mean[,1]
View(ww.pp.mean)
breaks <- c(0,0.2,0.8,1)
prev.pp <- data.frame(prev.pp.mean[,32],prev.pp.mean[,1:31])
colnames(prev.pp)[2:32] <- dimnames(ww.pred)[[3]][3:33]
ww.pp <- data.frame(ww.pp.mean[,40],ww.pp.mean[,1:31])
colnames(ww.pp)[2:32] <- dimnames(ww.pred)[[3]][3:33]
ww.pp
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
library(biscale)
data <- bi_class(LTLAmap, x = V1.x, y = V1.y, style = "quantile", dim = 3)
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
library(biscale)
data <- bi_class(LTLAmap, x = V1.x, y = V1.y, style = "quantile", dim = 3)
LTLAmap
library(biscale)
data <- bi_class(LTLAmap, x = 2021-06-14.x, y = 2021-06-14.y, style = "quantile", dim = 3)
library(biscale)
data <- bi_class(LTLAmap, x = "2021-06-14.x", y = "2021-06-14.y", style = "quantile", dim = 3)
library(biscale)
data <- bi_class(LTLAmap, x = 2021-06-14.x, y = 2021-06-14.y, style = "quantile", dim = 3)
library(biscale)
data <- bi_class(LTLAmap, x = LTLAmap[,2], y = LTLAmap[,33], style = "quantile", dim = 3)
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
LTLAmap
LTLA <- st_read("LTLA/LAD_MAY_2021_UK_BFE_V2.shp")
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap <- left_join(ww.pp ,LTLAmap,by="LAD21CD")
LTLAmap
prev.pp.mean[,32]
ww.pp.mean
ww.pp.mean$LAD21CD
LTLAmap <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap
LTLAmap.ww <- left_join(ww.pp ,LTLA,by="LAD21CD")
LTLAmap.ww
LTLA.final <- inner_join(LTLAmap.prev,LTLAmap.ww,by="LAD21CD")
LTLAmap.prev <- left_join(prev.pp, LTLA, by="LAD21CD")
LTLAmap.ww <- left_join(ww.pp ,LTLA,by="LAD21CD")
LTLA.final <- inner_join(LTLAmap.prev,LTLAmap.ww,by="LAD21CD")
LTLA.final
library(biscale)
data <- bi_class(LTLAmap, x = LTLAmap[,2], y = LTLAmap[,33], style = "quantile", dim = 3)
Now that we have the posterior probability of increments for the prevalence and for wastewater we can prepare a table/map. Create the categories
library(biscale)
data <- bi_class(LTLA.final, x = LTLA.final[,2], y = LTLA.final[,33], style = "quantile", dim = 3)
library(renderthis)
df<- data.frame(theta=c(0.1,0.4,0.8), p=c(0.2,0.5,0.3), post=c(0,0.99,0.01), lik=c(0.0000064,0.117,0.002))
df_nn <- c()df[,2]*df[4]
df_nn <- df[,2]*df[4]
df_nn
0.4*0.117
df[,2]%*%df[4]
df_nn <- df[,2]*df[,4]
df_nn
df[,2]%*%df[,4]
df[,2]
df[,4]
df[1,2]*df[1,4]
df[2,2]*df[2,4]
a=9.2;b=13.8
#Data
y=15; n=20
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(a = a, b = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
library(ggplot2)
a=9.2;b=13.8
#Data
y=15; n=20
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(a = a, b = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
p1
help(stat_function)
help(dbeta)
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
p1
a
b
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = a, sd = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1 <- ggplot()
p1
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab("") +
scale_y_continuous(breaks = NULL)
p1
help(dbinom)
p_temp <- dbinom(15,20,seq(0,1,0.01))
p_temp
plot(p_temp)
2 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbinom, n = 101, args = list(x=y,size = n)) + ylab("") +
scale_y_continuous(breaks = NULL)
p2 <- ggplot(aes(seq(0, 1,0.01)), p_temp) +
ylab("") + scale_y_continuous(breaks = NULL)
p2 <- ggplot(aes(seq(0, 1,0.01), p_temp)) +
ylab("") + scale_y_continuous(breaks = NULL)
ggplot() + aes(seq(0, 1,0.01), p_temp)
ggplot() + aes(seq(0, 1,0.01), p_temp)+ggline()
ggplot() + aes(seq(0, 1,0.01), p_temp)+gg_line()
ggplot() + aes(seq(0, 1,0.01), p_temp)+gg.line()
help(ggline)
ggplot() + aes(seq(0, 1,0.01), p_temp)+geom_line()
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab(expression(p(theta))) + scale_y_continuous(breaks = NULL)
p_temp <- dbinom(15,20,seq(0,1,0.01))
x<-seq(0,1,0.01)
p2 <- ggplot() + aes(seq(0, 1,0.01), p_temp)+geom_line() + ylab(paste(expression("L(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
p3 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a+15, shape2 = b+5)) + ylab(paste(expression("p(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
grid.arrange(p2,p1,p3,nrow=3)
#library(cowplot)
p1 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a, shape2 = b)) + ylab(expression(p(theta))) + scale_y_continuous(breaks = NULL)
p_temp <- dbinom(15,20,seq(0,1,0.01))
x<-seq(0,1,0.01)
p2 <- ggplot() + aes(seq(0, 1,0.01), p_temp)+geom_line() + ylab(paste(expression("L(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
p3 <- ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(fun = dbeta, n = 101, args = list(shape1 = a+15, shape2 = b+5)) + ylab(paste(expression("p(",theta,"|y=15)"))) + scale_y_continuous(breaks = NULL)
#grid.arrange(p1,p2,p3,nrow=3)
p1
p2
p3
install.packages("tikzDevice")
install.packages("magick")
library(kableExtra)
df<- data.frame(theta=c(0.1,0.4,0.8), p=c(0.2,0.5,0.3), post=c(0,0.99,0.01), lik=c(0.0000064,0.117,0.002))
kable(df[1:3], col.names = c("$\\theta$", "$p(\\theta)$", "$p(\\theta \\mid y=10)$"), "pipe", escape = F, caption = "Prior and posterior ",  booktabs=TRUE) %>%  row_spec(1, bold = TRUE, italic = TRUE, background="green") %>% column_spec(1:3,border_left = TRUE, border_right = TRUE)
kable(df[1:3], col.names = c("$\\theta$", "$p(\\theta)$", "$p(\\theta \\mid y=10)$"), "pipe", escape = F, caption = "Prior and posterior ",  booktabs=TRUE) %>%  row_spec(1, bold = TRUE, italic = TRUE, background="green") %>% column_spec(1:3,border_left = TRUE, border_right = TRUE) %>% kable_styling(latex_options = "hold_position")
kable(df[1:3])
kable(df[1:3]) %>% kable_classic()
df[1:3]
help("kable_styling")
help("column_spec")
4136/45304711
library(INLA)
data(seeds)
data(seed)
data(iris)
formula <- Petal.Length ~  1 + Petal.Width
output <- inla(formula, family="gaussian", data=iris, control.predictor(compute=TRUE))
output
help("control.predictor")
output$summary.linear.predictor
names(output)
output$summary.fitted.values
output$summary.fixed
library(mice)
data(fdgs)
subset1 <- which(is.na(fdgs$wgt) | is.na(fdgs$hgt))
#Subset 2, random sample of 500 individuals
set.seed(1)
subset2 <- sample((1:nrow(fdgs))[-subset1], 1000)
# Subset 1 + subset 2
fdgs.sub <- fdgs[c(subset1, subset2), ]
summary(fdgs.sub)
library("INLA")
wgt.inla <- inla(wgt ~ age + sex, data = fdgs.sub,
control.predictor = list(compute = TRUE))
summary(wgt.inla)
wgt.na <- which(is.na(fdgs.sub$wgt))
rownames(fdgs.sub)[wgt.na]
# Obtain the predictive distribution
wgt.inla$summary.fitted.values[wgt.na, c("mean", "sd")][1:10,]
hgt.inla <- inla(hgt ~ age + sex, data = fdgs.sub,
control.predictor = list(compute = TRUE),
control.compute = list(config = TRUE))
summary(hgt.inla)
hgt.na <- which(is.na(fdgs.sub$hgt))
hgt.inla$summary.fitted.values[hgt.na, c("mean", "sd")][1:10,]
n <- nrow(fdgs.sub)
y <- matrix(NA, nrow = 2 * n, ncol = 2)
y[1:n, 1] <- fdgs.sub$hgt
y[n + 1:n, 2] <- fdgs.sub$wgt
I <- matrix(NA, nrow = 2 * n, ncol = 2)
I[1:n, 1] <- 1
I[n + 1:n, 2] <- 1
age.joint <- rep(fdgs.sub$age, 2)
sex.joint <- rep(fdgs.sub$sex, 2)
idx.age = rep(1:2, each = n)
idx.sex = rep(1:2, each = n)
set.seed(5678)
joint.f <- y ~ -1 + I + f(idx.sex, sex, model="iid2d", n=2) + f(idx.age, age, model = "iid2d", n = 2)
# Model fit
fdgs.joint <- inla(joint.f,
data = list(y = y, I = I, sex = sex.joint, age = age.joint, idx.age = idx.age, idx.sex= idx.sex),
family = rep("gaussian", 2),
control.predictor = list(compute = TRUE))
# Summary fixed (intercept)
fdgs.joint$summary.fixed
joint.wgt.na = wgt.na+n
#Height
fdgs.joint$summary.fitted.values[hgt.na, c("mean", "sd")][1:10,]
fdgs.joint$summary.fitted.values[joint.wgt.na, c("mean", "sd")][1:10,]
fdgs.joint$summary.fitted.values[joint.wgt.na,][1:10,]
wgt.inla$summary.fitted.values[joint.wgt.na,][1:10,]
ls()
wgt.inla$summary.fitted.values[wgt.na,][1:10,]
library(INLA)
library(lwgeom)
library(raster)
m <- getData(name = "GADM", country = "Spain", level = 0)
plot(m)
#
library(sf)
library(dplyr)
m <- m %>%
st_as_sf() %>%
st_cast("POLYGON") %>%
mutate(area = st_area(.)) %>%
arrange(desc(area)) %>%
slice(1)
#
library(ggplot2)
ggplot(m) + geom_sf() + theme_bw()
m <- m %>% st_transform(25830)
ggplot(m) + geom_sf() + theme_bw() + coord_sf(datum = st_crs(m))
setwd("~/Downloads")
#### Read data
d <- read.csv("dataPM25.csv")
d <- d[, c(
"ReportingYear", "StationLocalId",
"SamplingPoint_Longitude",
"SamplingPoint_Latitude",
"AQValue"
)]
names(d) <- c("year", "id", "long", "lat", "value")
library(sf)
p = st_as_sf(data.frame(long = d$long, lat = d$lat),
coords = c("long", "lat"))
st_crs(p) = st_crs(4326)
p = p %>% st_transform(25830)
d[, c("x", "y")] = st_coordinates(p)
ind <- st_intersects(m, p)
d <- d[ind[[1]], ]
### project the data
p <- st_as_sf(data.frame(long = d$long, lat = d$lat),
coords = c("long", "lat"))
st_crs(p) <- st_crs(4326)
p <- p %>% st_transform(25830)
d[, c("x", "y")] <- st_coordinates(p)
# keep station in the main territory of Spain
ind <- st_intersects(m, p)
d <- d[ind[[1]], ]
ggplot(m) + geom_sf() + coord_sf(datum = st_crs(m)) +
geom_point(data = d, aes(x = x, y = y)) + theme_bw()
# plot 3 years of data
library(viridis)
ggplot(m) + geom_sf() + coord_sf(datum = NA) +
geom_point(
data = d, aes(x = x, y = y, color = value),
size = 2
) +
labs(x = "", y = "") +
scale_color_viridis() +
facet_wrap(~year) +
theme_bw()
### Models ####
library(INLA)
# mesh
coo <- cbind(d$x, d$y)
bnd <- inla.nonconvex.hull(st_coordinates(m)[, 1:2])
mesh <- inla.mesh.2d(
loc = coo, boundary = bnd,
max.edge = c(100000, 200000), cutoff = 1000
)
plot(mesh)
points(coo, col = "red")
# spde
spde <- inla.spde2.pcmatern(
mesh = mesh, alpha = 2, constr = TRUE,
prior.range = c(10000, 0.01), # P(range < 10000) = 0.01
prior.sigma = c(3, 0.01) # P(sigma > 3) = 0.01
)
# index set
timesn <- length(unique(d$year))
indexs <- inla.spde.make.index("s",
n.spde = spde$n.spde,
n.group = timesn
)
lengths(indexs)
# Projection matrix
group <- d$year - min(d$year) + 1
A <- inla.spde.make.A(mesh = mesh, loc = coo, group = group)
# Prediction data
bb <- st_bbox(m)
x <- seq(bb$xmin - 1, bb$xmax + 1, length.out = 50)
y <- seq(bb$ymin - 1, bb$ymax + 1, length.out = 50)
dp <- as.matrix(expand.grid(x, y))
plot(dp, asp = 1)
# keep only locations within borders of spain
p <- st_as_sf(data.frame(x = dp[, 1], y = dp[, 2]),
coords = c("x", "y")
)
st_crs(p) <- st_crs(25830)
ind <- st_intersects(m, p)
dp <- dp[ind[[1]], ]
plot(dp, asp = 1)
dp <- rbind(cbind(dp, 1), cbind(dp, 2), cbind(dp, 3))
head(dp)
# A matrix for predictions
coop <- dp[, 1:2]
groupp <- dp[, 3]
Ap <- inla.spde.make.A(mesh = mesh, loc = coop, group = groupp)
# Stacks
stk.e <- inla.stack(
tag = "est",
data = list(y = d$value),
A = list(1, A),
effects = list(data.frame(b0 = rep(1, nrow(d))), s = indexs)
)
stk.p <- inla.stack(
tag = "pred",
data = list(y = NA),
A = list(1, Ap),
effects = list(data.frame(b0 = rep(1, nrow(dp))), s = indexs)
)
stk.full <- inla.stack(stk.e, stk.p)
# formula
rprior <- list(theta = list(prior = "pccor1", param = c(0, 0.9)))
formula = y ~ -1 + b0 + f(s,
model = spde, group = s.group,
control.group = list(model = "ar1", hyper = rprior))
# inla call
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE))
inla.setOption(inla.mode="experimental")
# inla call
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE))
formula = y ~ -1 + b0 + f(s,
model = spde, group = s.group,
control.group = list(model = "rw1", hyper = rprior))
inla.setOption(inla.mode="experimental")
# inla call
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE))
# inla call
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE), verbose = TRUE)
fit <- inla(formula,
data = inla.stack.data(stk.e, spde=spde),
family = "gaussian",
#            control.predictor = list(A = inla.stack.A(stk.full),
#                                    compute = TRUE),
#            control.compute = list(return.marginals.predictor = TRUE),
verbose = TRUE)
stk.e <- inla.stack(
tag = "est",
data = list(y = d$value),
A = list(1, A),
effects = list(data.frame(b0 = rep(1, nrow(d))), s = indexs)
)
fit <- inla(formula,
data = inla.stack.data(stk.e, spde=spde),
family = "gaussian",
#            control.predictor = list(A = inla.stack.A(stk.full),
#                                    compute = TRUE),
#            control.compute = list(return.marginals.predictor = TRUE),
verbose = TRUE)
formula
stk.e
indexs
stk.e <- inla.stack(
tag = "est",
data = list(y = d$value),
A = list(1, A),
effects = list(data.frame(b0 = rep(1, nrow(d))), s = indexs)
)
stk.e
formula = y ~ -1 + b0 + f(s,
model = spde, group = s.group,
control.group = list(model = "ar1", hyper = rprior))
inla.setOption(inla.mode="experimental")
# https://github.com/julianfaraway/rexamples/blob/main/mixed/jspmultilevel.md
# inla call
fit <- inla(formula,
data = inla.stack.data(stk.e, spde=spde),
family = "gaussian",
#            control.predictor = list(A = inla.stack.A(stk.full),
#                                    compute = TRUE),
#            control.compute = list(return.marginals.predictor = TRUE),
verbose = TRUE)
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE),
verbose = TRUE)
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE), control.inla=list(cmin=0),
verbose = TRUE)
sc<- 1/1000 ##scaling
coo <- cbind(d$x, d$y)*sc
bnd <- inla.nonconvex.hull(st_coordinates(m)[, 1:2]*sc)
mesh <- inla.mesh.2d(
loc = coo, boundary = bnd,
max.edge = c(100000, 200000)*sc, cutoff = 1000*sc
)
plot(mesh)
points(coo, col = "red")
# spde
spde <- inla.spde2.pcmatern(
mesh = mesh, alpha = 2, constr = TRUE,
prior.range = c(10000, 0.01), # P(range < 10000) = 0.01
prior.sigma = c(3, 0.01) # P(sigma > 3) = 0.01
)
# index set
timesn <- length(unique(d$year))
indexs <- inla.spde.make.index("s",
n.spde = spde$n.spde,
n.group = timesn
)
lengths(indexs)
# Projection matrix
group <- d$year - min(d$year) + 1
A <- inla.spde.make.A(mesh = mesh, loc = coo, group = group)
bb <- st_bbox(m)
x <- seq(bb$xmin - 1, bb$xmax + 1, length.out = 50)
y <- seq(bb$ymin - 1, bb$ymax + 1, length.out = 50)
dp <- as.matrix(expand.grid(x, y))
plot(dp, asp = 1)
p <- st_as_sf(data.frame(x = dp[, 1], y = dp[, 2]),
coords = c("x", "y")
)
st_crs(p) <- st_crs(25830)
ind <- st_intersects(m, p)
dp <- dp[ind[[1]], ]
plot(dp, asp = 1)
dp <- rbind(cbind(dp, 1), cbind(dp, 2), cbind(dp, 3))
head(dp)
# A matrix for predictions
coop <- dp[, 1:2]
groupp <- dp[, 3]
Ap <- inla.spde.make.A(mesh = mesh, loc = coop, group = groupp)
stk.e <- inla.stack(
tag = "est",
data = list(y = d$value),
A = list(1, A),
effects = list(data.frame(b0 = rep(1, nrow(d))), s = indexs)
)
stk.p <- inla.stack(
tag = "pred",
data = list(y = NA),
A = list(1, Ap),
effects = list(data.frame(b0 = rep(1, nrow(dp))), s = indexs)
)
stk.full <- inla.stack(stk.e, stk.p)
# formula
rprior <- list(theta = list(prior = "pccor1", param = c(0, 0.9)))
formula = y ~ -1 + b0 + f(s,
model = spde, group = s.group,
control.group = list(model = "ar1", hyper = rprior))
inla.setOption(inla.mode="experimental")
# https://github.com/julianfaraway/rexamples/blob/main/mixed/jspmultilevel.md
# inla call
fit <- inla(formula,
data = inla.stack.data(stk.full, spde=spde),
family = "gaussian",
control.predictor = list(A = inla.stack.A(stk.full),
compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE), control.inla=list(cmin=0),
verbose = TRUE)
setwd("~/Dropbox/Conferences-Talks/Overview-ST")
to_pdf(from = "index.html", partial_slides = TRUE)
library(renderthis)
to_pdf(from = "index.Rmd", partial_slides = TRUE)
to_pdf(from = "index.html", partial_slides = TRUE)
to_pdf(from = "index.html", partial_slides = TRUE)
