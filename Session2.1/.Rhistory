library(INLA)
help("inla")
help("control.predictor")
help("control.compute")
1830/5
3/0.75
xaringan:::inf_mr()
set.seed(1234)
library(truncnorm)
noise.high<- rtruncnorm(600,a=50,b=Inf,60,5)
noise.low<- runif(400,0,49)
noise.tot<- c(noise.high,noise.low)
iid <- rnorm(1000,0,0.1)
id.high<-noise.tot>=50
id.low<-noise.tot<50
#If the true relationship is linear across the entire range of noise values
#health
mu<- log(10) -5 + 0.1*noise.tot + iid
y<-rpois(1000,exp(mu))
glm(y~noise.tot,family="poisson",offset=rep(log(10),1000))
plot(noise.tot,mu)
#Subsetting on the ones with noise above 49
y.high<- y[id.high]
length(y.high)
glm(y.high~noise.high,family="poisson",offset=rep(log(10),length(y.high)))
####################################
#If there is a threshold on the noise level
mu.high<- log(5) -5 + 0.1*noise.high + iid[id.high]
mu.low<- log(5) -5 + 0.01*noise.low + iid[id.low] + iid[id.low]
mu<-c(mu.high,mu.low)
plot(noise.tot,mu)
####################################
#If there is a threshold on the noise level
mu.high<- log(5) -5 + 0.1*noise.high + iid[id.high]
mu.low<- log(5) -5 + 0.01*noise.low + 3*iid[id.low]
mu<-c(mu.high,mu.low)
plot(noise.tot,mu)
y.new <- c(rpois(1000, exp(mu)))
glm(y.new~noise.tot,family="poisson",offset=rep(log(5),1000))
#Subsetting on the ones with noise above 49
y.high<- y.new[id.high]
glm(y.high~noise.tot[id.high],family="poisson",offset=rep(log(10),length(y.high)))
####################################
#If there is a threshold on the noise level
mu.high<- log(5) -5 + 0.1*noise.high + iid[id.high]
mu.low<- log(5) -5 + 5*iid[id.low]
mu<-c(mu.high,mu.low)
plot(noise.tot,mu)
y.new <- c(rpois(1000, exp(mu)))
glm(y.new~noise.tot,family="poisson",offset=rep(log(5),1000))
#Subsetting on the ones with noise above 49
y.high<- y.new[id.high]
glm(y.high~noise.tot[id.high],family="poisson",offset=rep(log(10),length(y.high)))
plot(noise.tot[id.high],mu.high)
2600/21
help(cov)
help(mrnorm)
help("hist")
options(timeout=600)
install.packages("tidyverse")
install.packages("here")
install.packages("rmarkdown")
install.packages('BCEA')
install.packages('rjags')
install.packages("R2OpenBUGS")
install.packages("R2jags")
install.packages('INLA', repos='https://inla.r-inla-download.org/R/stable')
remotes::install_github("giabaio/bmhe_utils")
library(R2OpenBUGS)
library(R2Openbugs)
library(R2OpenBugs)
options(timeout=600)
install.packages("tidyverse")
install.packages("here")
install.packages("rmarkdown")
install.packages('BCEA')
install.packages('rjags')
install.packages("R2OpenBUGS")
install.packages("R2jags")
install.packages('INLA', repos='https://inla.r-inla-download.org/R/stable')
remotes::install_github("giabaio/bmhe_utils")
library(R2OpenBUGS)
library(R2jags)
install.packages('INLA', repos='https://inla.r-inla-download.org/R/stable')
remotes::install_github("giabaio/bmhe_utils")
install.packages('INLA', repos='https://inla.r-inla-download.org/R/stable')
remotes::install_github("giabaio/bmhe_utils")
library(INLA)
install.packages("foreach","sp")
install.packages("foreach","sp")
install.packages('INLA', repos='https://inla.r-inla-download.org/R/stable')
library(INLA)
install.packages('INLA', repos='https://inla.r-inla-download.org/R/testing')
library(INLA)
installed.packages("sp")
installed.packages("sp")
library(INLA)
installed.package("sp")
install.package("sp")
install.packages("sp")
library(INLA)
install.package("inlabru")
install.packages("inlabru")
install.packages("inlabru")
library(INLA)
remotes::install_github("giabaio/bmhe_utils")
remotes::install_github("giabaio/bmhe_utils")
libPaths
.libPaths
.libPaths()
install.packages("remotes")
remotes::install_github("giabaio/bmhe_utils")
remotes::install_github("giabaio/survHE")
remotes::install_github("giabaio/survHEinla")
exp(-0.1)
library(INLA)
help(control.compute)
remotes::install_github('mitchelloharawild/icons')
install.packages("tikzDevice")
install.packages("kableExtra")
install.packages("RefManageR")
install.packages("RefManageR")
library(bkmr)
set.seed(111)
dat <- SimData(n = 50, M = 4)
y <- dat$y
Z <- dat$Z
X <- dat$X
X
X<- rbinom(50,3,0.4)
X
X<- X+1
X
set.seed(111)
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 10000, verbose = FALSE, varsel = TRUE)
TracePlot(fit = fitkm, par = "beta")
TracePlot(fit = fitkm, par = "beta", comp=2)
set.seed(111)
fitkm <- kmbayes(y = y, Z = Z, X = as.factor(X), iter = 10000, verbose = FALSE, varsel = TRUE)
install.packages("fastDummies")
library(fastDummies)
library(fastDummies)
dummy_cols(X)
X.cat=dummy_cols(X)
set.seed(111)
fitkm <- kmbayes(y = y, Z = Z, X = X.cat[,3:5], iter = 10000, verbose = FALSE, varsel = TRUE)
TracePlot(fit = fitkm, par = "beta")
TracePlot(fit = fitkm, par = "beta2")
TracePlot(fit = fitkm, par = "beta", comp=2)
library(INLA)
help(inla)
help(control.inla)
library(INLA)
library(ganttrify)
test_project
setwd("C:/Users/magb/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.3")
to_pdf(from = "index.html", partial_slides = TRUE)
library(renderthis)
to_pdf(from = "index.html", partial_slides = TRUE)
setwd("C:/Users/magb/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session2.1")
to_pdf(from = "index.html", partial_slides = TRUE)
