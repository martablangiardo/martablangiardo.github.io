library(nimble)
.libPaths()
getwd()
library(sf)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
#https://stackoverflow.com/questions/16680618/installing-packages-onto-r
.libPaths()
R.home("bin")
.libPaths("C:/Program Files/R/R-4.1.1/library")
#install.packages("C:\\schnellerGP.zip", repos=NULL, type="source")
install.packages("C:/schnellerGP.zip", repos=NULL, type="source")
install.packages("C:\\schnellerGP.zip", repos=NULL, type="source")
install.packages("D:/Matt_BayesEnviron/Package/schnellerGP.zip",
destdir = 'D:/Matt_BayesEnviron/Package',  # no "/" after the path
lib = 'D:/libs',
repos = NULL)
install.packages("D:/source/schnellerGP.zip",
destdir = 'D:/source',  # no "/" after the path
lib = 'D:/libs',
repos = NULL)
#https://stackoverflow.com/questions/16680618/installing-packages-onto-r
.libPaths()
install.packages("rmarkdown")
install.packages("xaringan")
setwd("C:/Bayes_Spatial_2022/Lectures/Week6/R_week6/R_CODE_WEEK6")
install.packages(c("spData","sf","tidyverse"), dependencies = TRUE,
repos = "http://cran.r-project.org")
library(spData); library(sf); library(tidyverse)
# Check vignette (it provides explanations of the package functionality)
vignette(package="sf")
vignette("sf1",package="sf") # display a specific vignette topic
# Read in "world" from spData package: World country polygons
# This is a sf object containing a world map data from Natural Earth
# with a few variables from World Bank
world <- st_read(system.file("shapes/world.gpkg", package="spData"))
plot(world)
plot(world["pop"])
### From sf object to sp object and reverse
world_sp <- as(world, "Spatial")  # from sf to sp object
class(world_sp)                   # "SpatialPolygonsDataFrame"
world_sf <- st_as_sf(world_sp)    # from sp to sf object
class(world_sf)                   # "sf"  "data.frame"
# Select and plot information for a single attribute
world %>% select(lifeExp) %>% plot()
# Extract geometry
world_geo <- st_geometry(world)
# Extract and plot out only the geometry
world %>% st_geometry() %>% plot()
# or
plot(st_geometry(world))
plot(world_geo)
world_geo
# Extract the CRS information from the sf object nz (New Zealand)
st_crs(nz) # here EPSG:2193
# Re-project using an EPSG code
nz_wgs <- st_transform(nz, 4326)
st_crs(nz_wgs) # now EPSG:4326
# Extract the CRS information from the sf object world
st_crs(world) #EPSG:4326
# Re-project using an EPSG code
nz_wgs <- st_transform(nz, 4326)
st_crs(nz_wgs) # now EPSG:4326
# Extract the CRS information from the sf object world
st_crs(world) #EPSG:4326
# Extract the CRS information from the sf object world
st_crs(world) #EPSG:4326
# Re-project using CRS of the sf object world
nz_wgs = st_transform(nz, st_crs(world))
st_crs(nz_wgs)
# Remove the CRS from nz_wgs and plot the result
nz_wgs_NULL_crs = st_set_crs(nz_wgs, NA)
par(mfrow = c(1, 3))
plot(st_geometry(nz))
plot(st_geometry(nz_wgs))
plot(st_geometry(nz_wgs_NULL_crs))
library(raster); library(spdep); library(mapview)
# Read in Luxembourg shapefile from R package raster
lux <- shapefile(system.file("external/lux.shp", package="raster"))
summary(lux)
par(mar=c(0,0,0,0)) # par sets or adjusts plotting parameters,
# while the parameter mar stands for margin size
plot(lux, border=3, col=terrain.colors(length(lux)), axes=F)
text(lux,"NAME_2",cex=0.5)
par(mar=c(0,0,0,0)) # par sets or adjusts plotting parameters,
# while the parameter mar stands for margin size
plot(lux, border=3, col=terrain.colors(length(lux)), axes=F)
text(lux,"NAME_2",cex=0.5)
# Plot interactive map with R package mapview
mapView(lux)
w.rook <- poly2nb(lux, row.names=lux$ID_2, queen=FALSE)
w.rook
# The nb object w.rook lists for each polygon the neighboring polygons.
# For example, to see the neighbors for the first polygon in the object, type:
w.rook[[1]]
par(mar=c(0,0,0,0))
plot(lux,border=3, col=terrain.colors(length(lux)), axes=F)
text(lux,"ID_2",cex=1)
w.rook.l <- nb2listw(w.rook, style="B", zero.policy=TRUE)
# Check the weight of the first polygon's three neighbors
w.rook.l$weights[1]
w.rook.m <- nb2mat(w.rook, style="B", zero.policy = TRUE) #  spatial weights matrix
w.rook.m
# Compute coordinates at centroids of each canton
coords <- coordinates(lux)
par(mai=c(0,0,0,0))
plot(lux, col='white', border='blue')
plot(w.rook, coords, col='red', lwd=2, add=TRUE)
IDs <- row.names(as(lux, "data.frame"))
# K nearest neighbors for spatial weights
w.d_k3 <- knn2nb(knearneigh(coords, k=3), row.names = IDs) # here 3 nearest neighbors
par(mai=c(0,0,0,0))
plot(lux, col='white', border='blue')
plot(w.d_k3, coords, col='red', lwd=2, add=TRUE)
# neighborhood contiguity by distance
w.d10 <- dnearneigh(coords, 0, 10)
par(mai=c(0,0,0,0))
plot(lux, col='white', border='blue')
plot(w.d10, coords, col='red', lwd=1, add=TRUE)
library(SpatialEpi)
install.packages("SpatialEpi")
library(SpatialEpi)
library(tidyverse)
# read in the Pennsylvania data from SpatialEpi package
data("pennLC")
LC <- pennLC$data
head(LC)
# obtain the total number of cases by county
LC.OE <- group_by(LC, county) %>% summarize(O = sum(cases))
head(LC.OE)
# sort the data by county, race, gender and age
LC <- arrange(LC, county, race, gender, age)
expected <- expected(
population = LC$population,
cases = LC$cases, n.strata = 16)
LC.OE$E <- expected[match(LC.OE$county, unique(LC$county))]
head(LC.OE)
LC.OE$SIR <- LC.OE$O/LC.OE$E
head(LC.OE)
# to see the elements of type pennLC, type ?pennLC
?pennLC
head(LC)
table(LC$age)
table(LC$race)
table(LC$gender)
# to see the elements of type pennLC, type ?pennLC
?pennLC
class(LC)
