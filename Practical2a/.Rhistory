pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020) %>% group_by(EURO_LABEL) %>% filter(row_number()==4) -> EUROSTAT
EUROSTAT %>% group_by(year) %>% mutate(refdate = as.Date(paste0(year, "-01-01"))) -> EUROSTAT
EUROSTAT$day2pred <- as.numeric(EUROSTAT$EURO_TIME - as.Date("2015-01-01") + 1)
pop_weekly <- left_join(pop_weekly, EUROSTAT[,c("EURO_LABEL", "year", "day2pred", "refdate")],
by = c("EURO_LABEL" = "EURO_LABEL"))
pop_weekly
pop
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
pop_weekly
# we do not have the population for 2021, we can calculate with linear interpolation
pop %>% group_by(NUTS318CD, sex, ageg) %>%
summarise(population = as.vector(coef(lm(population ~ year)) %*% c(1, 2021))) %>%
mutate(year = 2021) -> pop2021
pop$X <- NULL
pop2021 <- pop2021[,colnames(pop)]
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, SIGLA,Genere,CL_ETA,Pop)
pop = pop %>% rename(age=CL_ETA, sex=Genere,year=Anno)
colnames(pop)[1] <- "NUTS318CD"
colnames(pop)[2] <- "year"
colnames(pop)[3] <- "sex"
colnames(pop)[4] <- "ageg"
colnames(pop)[5] <- "population"
pop
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, SIGLA,Genere,CL_ETA,Pop)
pop
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, Genere,CL_ETA,Pop)
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
pop
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, Genere,CL_ETA,Pop)
pop
colnames(pop)[1] <- "NUTS318CD"
colnames(pop)[2] <- "year"
colnames(pop)[3] <- "sex"
colnames(pop)[4] <- "ageg"
colnames(pop)[5] <- "population"
pop$ageg[pop$ageg %in% "40<"] <- "less40"
pop$ageg[pop$ageg %in% "80+"] <- "80plus"
# the ISO weeks file
EUROSTAT <- read_excel("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/EUROSTAT_ISO_HMEROLOGIO.xls")
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020 & year>= 2015) -> EUROSTAT
expand.grid(age = c("less40", "40-59", "60-69", "70-79", "80plus"),
sex = c("male", "female"),
region = unique(pop$NUTS318CD),
EURO_LABEL = unique(EUROSTAT$EURO_LABEL)) -> pop_weekly
pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020) %>% group_by(EURO_LABEL) %>% filter(row_number()==4) -> EUROSTAT
EUROSTAT %>% group_by(year) %>% mutate(refdate = as.Date(paste0(year, "-01-01"))) -> EUROSTAT
EUROSTAT$day2pred <- as.numeric(EUROSTAT$EURO_TIME - as.Date("2015-01-01") + 1)
pop_weekly <- left_join(pop_weekly, EUROSTAT[,c("EURO_LABEL", "year", "day2pred", "refdate")],
by = c("EURO_LABEL" = "EURO_LABEL"))
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
# we do not have the population for 2021, we can calculate with linear interpolation
pop %>% group_by(NUTS318CD, sex, ageg) %>%
summarise(population = as.vector(coef(lm(population ~ year)) %*% c(1, 2021))) %>%
mutate(year = 2021) -> pop2021
pop$X <- NULL
pop2021 <- pop2021[,colnames(pop)]
pop <- rbind(pop, pop2021)
length(unique(pop$ageg))*length(unique(pop$year))*length(unique(pop$sex))*length(unique(pop$NUTS318CD))
pop
# need to add the population of next year
pop$year <- pop$year - 1
colnames(pop)[5] <- "pop.next.year"
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
# get the next years ref date
pop_weekly$refdate2 <- as.Date(paste0(pop_weekly$year + 1, "-01-01"))
pop_weekly$X <- NULL
pop_weekly %>% mutate(lambda = (pop.next.year - population)/as.numeric((refdate2 - refdate))) %>%
mutate(beta0 = population - lambda*as.numeric(refdate - as.Date("2015-01-01") + 1)) %>%
mutate(popfin = beta0 + lambda*day2pred) -> pop_weekly
ageg = "40-59"
sexg = "male"
pop_weekly
pop2021
pop
pop[pop$year==2021,]
# we do not have the population for 2021, we can calculate with linear interpolation
pop %>% group_by(NUTS318CD, sex, ageg) %>%
summarise(population = as.vector(coef(lm(population ~ year)) %*% c(1, 2021))) %>%
mutate(year = 2021) -> pop2021
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, Genere,CL_ETA,Pop)
colnames(pop)[1] <- "NUTS318CD"
colnames(pop)[2] <- "year"
colnames(pop)[3] <- "sex"
colnames(pop)[4] <- "ageg"
colnames(pop)[5] <- "population"
pop$ageg[pop$ageg %in% "40<"] <- "less40"
pop$ageg[pop$ageg %in% "80+"] <- "80plus"
# the ISO weeks file
EUROSTAT <- read_excel("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/EUROSTAT_ISO_HMEROLOGIO.xls")
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020 & year>= 2015) -> EUROSTAT
expand.grid(age = c("less40", "40-59", "60-69", "70-79", "80plus"),
sex = c("male", "female"),
region = unique(pop$NUTS318CD),
EURO_LABEL = unique(EUROSTAT$EURO_LABEL)) -> pop_weekly
pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020) %>% group_by(EURO_LABEL) %>% filter(row_number()==4) -> EUROSTAT
EUROSTAT %>% group_by(year) %>% mutate(refdate = as.Date(paste0(year, "-01-01"))) -> EUROSTAT
EUROSTAT$day2pred <- as.numeric(EUROSTAT$EURO_TIME - as.Date("2015-01-01") + 1)
pop_weekly <- left_join(pop_weekly, EUROSTAT[,c("EURO_LABEL", "year", "day2pred", "refdate")],
by = c("EURO_LABEL" = "EURO_LABEL"))
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
# we do not have the population for 2021, we can calculate with linear interpolation
pop %>% group_by(NUTS318CD, sex, ageg) %>%
summarise(population = as.vector(coef(lm(population ~ year)) %*% c(1, 2021))) %>%
mutate(year = 2021) -> pop2021
pop
pop[pop$year==2021,]
pop$X <- NULL
pop2021
pop2021 <- pop2021[,colnames(pop)]
pop2021
pop <- rbind(pop, pop2021)
pop[pop$year==2021,]
# need to add the population of next year
pop$year <- pop$year - 1
colnames(pop)[5] <- "pop.next.year"
pop <- rbind(pop, pop2021)
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
pop_weekly
pop_weekly
pop_list <- readRDS("E:/Postdoc Imperial/Projects/COVID19 Greece/data/population/pop_list")
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, Genere,CL_ETA,Pop)
colnames(pop)[1] <- "NUTS318CD"
colnames(pop)[2] <- "year"
colnames(pop)[3] <- "sex"
colnames(pop)[4] <- "ageg"
colnames(pop)[5] <- "population"
pop$ageg[pop$ageg %in% "40<"] <- "less40"
pop$ageg[pop$ageg %in% "80+"] <- "80plus"
# the ISO weeks file
EUROSTAT <- read_excel("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/EUROSTAT_ISO_HMEROLOGIO.xls")
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020 & year>= 2015) -> EUROSTAT
expand.grid(age = c("less40", "40-59", "60-69", "70-79", "80plus"),
sex = c("male", "female"),
region = unique(pop$NUTS318CD),
EURO_LABEL = unique(EUROSTAT$EURO_LABEL)) -> pop_weekly
pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020) %>% group_by(EURO_LABEL) %>% filter(row_number()==4) -> EUROSTAT
EUROSTAT %>% group_by(year) %>% mutate(refdate = as.Date(paste0(year, "-01-01"))) -> EUROSTAT
EUROSTAT$day2pred <- as.numeric(EUROSTAT$EURO_TIME - as.Date("2015-01-01") + 1)
pop_weekly <- left_join(pop_weekly, EUROSTAT[,c("EURO_LABEL", "year", "day2pred", "refdate")],
by = c("EURO_LABEL" = "EURO_LABEL"))
pop_weekly
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
pop_weekly
pop
pop_weekly
rm(list=ls())
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, Genere,CL_ETA,Pop)
colnames(pop)[1] <- "NUTS318CD"
colnames(pop)[2] <- "year"
colnames(pop)[3] <- "sex"
colnames(pop)[4] <- "ageg"
colnames(pop)[5] <- "population"
pop$ageg[pop$ageg %in% "40<"] <- "less40"
pop$ageg[pop$ageg %in% "80+"] <- "80plus"
# the ISO weeks file
EUROSTAT <- read_excel("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/EUROSTAT_ISO_HMEROLOGIO.xls")
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020 & year>= 2015) -> EUROSTAT
pop_weekly <- as_tibble(expand.grid(age = unique(pop$ageg),
region = unique(pop$NUTS318CD),
sex = c("male", "female"),
EURO_LABEL = unique(EUROSTAT$EURO_LABEL)))
pop_weekly
pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020) %>% group_by(EURO_LABEL) %>% filter(row_number()==4) -> EUROSTAT
EUROSTAT %>% group_by(year) %>% mutate(refdate = as.Date(paste0(year, "-01-01"))) -> EUROSTAT
EUROSTAT$day2pred <- as.numeric(EUROSTAT$EURO_TIME - as.Date("2015-01-01") + 1)
pop_weekly <- left_join(pop_weekly, EUROSTAT[,c("EURO_LABEL", "year", "day2pred", "refdate")],
by = c("EURO_LABEL" = "EURO_LABEL"))
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
pop_weekly
pop
pop_weekly
pop<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/pop15_20_final.RData")
#pop_it<- load("~/Dropbox/2021_OneYearOfCovid/Italy_Data/finaldb.RData")
pop<-pop15_20_final %>% select(COD_PROV, Anno, Genere,CL_ETA,Pop)
pop
colnames(pop)[1] <- "NUTS318CD"
colnames(pop)[2] <- "year"
colnames(pop)[3] <- "sex"
colnames(pop)[4] <- "ageg"
colnames(pop)[5] <- "population"
pop$ageg[pop$ageg %in% "40<"] <- "less40"
pop$ageg[pop$ageg %in% "80+"] <- "80plus"
# the ISO weeks file
EUROSTAT <- read_excel("~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/EUROSTAT_ISO_HMEROLOGIO.xls")
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020 & year>= 2015) -> EUROSTAT
# get the expand grid
expand.grid(age = c("less40", "40-59", "60-69", "70-79", "80plus"),
sex = c("M", "F"),
region = unique(pop$NUTS318CD),
EURO_LABEL = unique(EUROSTAT$EURO_LABEL)) -> pop_weekly
pop_weekly$EURO_LABEL <- as.character(pop_weekly$EURO_LABEL)
EUROSTAT$EURO_TIME <- as.Date(format(as.POSIXct(EUROSTAT$EURO_TIME, format='%Y-%m-%d %H:%M:%S'), format='%Y-%m-%d'))
EUROSTAT$year <- as.numeric(format(EUROSTAT$EURO_TIME, "%Y"))
EUROSTAT %>% filter(year <= 2020) %>% group_by(EURO_LABEL) %>% filter(row_number()==4) -> EUROSTAT
EUROSTAT %>% group_by(year) %>% mutate(refdate = as.Date(paste0(year, "-01-01"))) -> EUROSTAT
EUROSTAT$day2pred <- as.numeric(EUROSTAT$EURO_TIME - as.Date("2015-01-01") + 1)
pop_weekly <- left_join(pop_weekly, EUROSTAT[,c("EURO_LABEL", "year", "day2pred", "refdate")],
by = c("EURO_LABEL" = "EURO_LABEL"))
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
pop_weekly
# we do not have the population for 2021, we can calculate with linear interpolation
pop %>% group_by(NUTS318CD, sex, ageg) %>%
summarise(population = as.vector(coef(lm(population ~ year)) %*% c(1, 2021))) %>%
mutate(year = 2021) -> pop2021
pop$X <- NULL
pop2021 <- pop2021[,colnames(pop)]
pop <- rbind(pop, pop2021)
length(unique(pop$ageg))*length(unique(pop$year))*length(unique(pop$sex))*length(unique(pop$NUTS318CD))
# need to add the population of next year
pop$year <- pop$year - 1
colnames(pop)[5] <- "pop.next.year"
pop_weekly <- left_join(pop_weekly, pop, by = c("year" = "year", "age" = "ageg", "sex" = "sex", "region" = "NUTS318CD"))
# get the next years ref date
pop_weekly$refdate2 <- as.Date(paste0(pop_weekly$year + 1, "-01-01"))
pop_weekly$X <- NULL
pop_weekly %>% mutate(lambda = (pop.next.year - population)/as.numeric((refdate2 - refdate))) %>%
mutate(beta0 = population - lambda*as.numeric(refdate - as.Date("2015-01-01") + 1)) %>%
mutate(popfin = beta0 + lambda*day2pred) -> pop_weekly
#########################################
ageg = "40-59"
sexg = "male"
regiong = "PE15"
pop_weekly$days2plot <- as.numeric(as.factor(pop_weekly$EURO_LABEL))
pop_weekly[pop_weekly$year==2021,]
pop_weekly[pop_weekly$year==2020,]
library(ggplot2)
pop_weekly$days2plot <- as.numeric(as.factor(pop_weekly$EURO_LABEL))
pop_weekly %>% filter(age == ageg, sex == sexg, region == regiong) %>%
ggplot() + geom_point(aes(x = days2plot, y = popfin))
regiong = "84"
pop_weekly %>% filter(age == ageg, sex == sexg, region == regiong) %>%
ggplot() + geom_point(aes(x = days2plot, y = popfin))
pop_weekly %>% filter(age == ageg, sex == sexg, region == regiong)
#########################################
ageg = "40-59"
sexg = "male"
sexg = "M"
regiong = "84"
pop_weekly %>% filter(age == ageg, sex == sexg, region == regiong) %>%
ggplot() + geom_point(aes(x = days2plot, y = popfin))
saveRDS(pop_weekly, file = "~/Dropbox/2021_OneYearOfCovid/Italy_Data/POP/popfin_8_6_21")
librry(nimble)
libary(nimble)
install.packages(nimble)
install.packages("nimble")
librry(nimble)
library(nimble)
pumpCode <- nimbleCode({
for (i in 1:N){
theta[i] ~ dgamma(alpha,beta)
lambda[i] <- theta[i]*t[i]
x[i] ~ dpois(lambda[i])
}
#Set priors
alpha ~ dexp(1.0)
beta ~ dgamma(0.1,1.0)
})
pumpConsts <- list(N = 10,
t = c(94.3, 15.7, 62.9, 126, 5.24,
31.4, 1.05, 1.05, 2.1, 10.5))
pumpData <- list(x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22))
pumpInits <- list(alpha = 1, beta = 1,
theta = rep(0.1, pumpConsts$N))
nimbleMCMC_samples <- nimbleMCMC(code = pumpCode,
constants = pumpConsts,
data = pumpData,
inits = pumpInits,
nburnin = 1000, niter = 10000)
install.packages(c("ggmcmc", "knitr", "mcmcplots"))
library(nimble)
code <- nimbleCode({
# priors:
mu ~ dnorm(0, sd = 10)
sigma2 ~ dunif(0, 1000)
tau <- 1 / sigma2
# likelihood:
for(i in 1:N){
X[i] ~ dnorm(mu, var = sigma2)
}
})
data <- list(x = c(2, 5, 3, 4, 1, 0, 1, 3, 5, 3))
mcmc.out <- nimbleMCMC(code = code,
data = data,
nchains = 2, niter = 1000)
library(nimble)
pumpCode <- nimbleCode({
for (i in 1:N){
theta[i] ~ dgamma(alpha,beta)
lambda[i] <- theta[i]*t[i]
x[i] ~ dpois(lambda[i])
}
#Set priors
alpha ~ dexp(1.0)
beta ~ dgamma(0.1,1.0)
})
#Create some contrants, data, and initial values to pass to the model builder
pumpConsts <- list(N = 10,
t = c(94.3, 15.7, 62.9, 126, 5.24,
31.4, 1.05, 1.05, 2.1, 10.5))
pumpData <- list(x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22))
pumpInits <- list(alpha = 1, beta = 1,
theta = rep(0.1, pumpConsts$N))
nimbleMCMC_samples <- nimbleMCMC(code = pumpCode,
constants = pumpConsts,
data = pumpData,
inits = pumpInits,
nburnin = 1000, niter = 10000)
code <- nimbleCode({
# priors:
mu ~ dnorm(0, sd = 10)
sigma2 ~ dunif(0, 1000)
tau <- 1 / sigma2
# likelihood:
for(i in 1:N){
X[i] ~ dnorm(mu, var = sigma2)
}
})
code
data <- list(x = c(2, 5, 3, 4, 1, 0, 1, 3, 5, 3))
data
mcmc.out <- nimbleMCMC(code = code,
data = data,
nchains = 2, niter = 1000)
N=10
mcmc.out <- nimbleMCMC(code = code,
data = data,
nchains = 2, niter = 1000)
help(expected)
library(SpatialEpi)
devtoold::install_github('mitchelloharawild/icons')
devtools::install_github('mitchelloharawild/icons')
install.packages("devtools")
devtools::install_github('mitchelloharawild/icons')
install.packages(c("kableExtra", "magick", "RefManageR", "tikzDevice"))
install.packages("xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
xaringan:::inf_mr()
icons::download_fontawesome()
xaringan:::inf_mr()
devtools::install_github("diogo-fernan/academicons")
icons::download_academicons()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
add_website()
add_twitter()
xaringan:::inf_mr()
xaringan:::inf_mr()
remotes::install_github("ROpenSci/bibtex")
xaringan:::inf_mr()
xaringan:::inf_mr()
plot(density(rchisq(10000,3)),axes=T, main="",ylab="",xlab="")
lines(density(rnorm(10000,1,2)),lty=2)
help(legend)
legend(7,0.25,lwd=0.5,legend=expression(paste(chi^2,"(3)")))
plot(density(rchisq(10000,3)),axes=T, main="",ylab="",xlab="",xlim=c(0,10))
lines(density(rnorm(10000,1,2)),lty=2)
legend(7,0.25,lwd=0.5,legend=expression(paste(chi^2,"(3)")))
plot(density(rchisq(10000,3)),axes=T, main="",ylab="",xlab="",xlim=c(0,10))
lines(density(rnorm(10000,1,2)),lty=2)
legend(7,0.25,lwd=0.5,legend=expression(paste(chi^2,"(3)")))
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
library(dplyr)        # A package for data manipulation
library(sf)           # Simple feature for R
library(spdep)        # Functions and tests for evaluating spatial patterns
# and autocorrelation
library(tidyr)
library(INLA)         # Integrated Nested Laplace Approximation package
library(ggplot2)      # A package that implements the grammar of graphics, which is a term used to
# break up graphs into semantic components, such as geometries and layers.
library(viridis)      # A package providing color palettes
library(patchwork)
install.packages("terra")
install.packages("terra")
install.packages(c("raster", "Rcpp"))
install.packages(c("raster", "Rcpp"))
remotes::install_github("rspatial/terra")
install.packages('terra', repos='https://rspatial.r-universe.dev')
install.packages('raster')
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages("xaringan")
remotes::install_github('mitchelleoharanwild/icons')
remotes::install_github('mitchelleoharawild/icons')
remotes::install_github('mitchelloharawild/icons')
install.packages("tikzDevide")
install.packages("tikzDevice")
install.packages("RefManageR")
install.packages("bibtex")
install.packages("psychModel")
install.packages("psycModel")
library(psycModel)
html_to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/")
install.packages('pagedown')
html_to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/")
html_to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html")
html_to_pdf(file_path = "~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html")
remotes::install_github("jhelvy/renderthis")
library(renderthis)
help(to_pdf)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
remotes::install_github('rstudio/chromote')
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
install.packages('pdftools')
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.2/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.2/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.2/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.3/index.html", complex_slides=TRUE, partial_slides=TRUE)
library(renderthis)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.3/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.2/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.4/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session2.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session2.2/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session2.3/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session2.4/index.html", complex_slides=TRUE, partial_slides=TRUE)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
library(renderthis)
to_pdf("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Session1.1/index.html", complex_slides=TRUE, partial_slides=TRUE)
data(Seeds)
library(datasetsICR)
install.packages("datasetsICR")
library(datasetsICR)
data(Seeds)
data(seeds)
head(seeds)
set.seed(1234) #set the seed
n = 100
sigma = 0.1
beta.0 =  2
beta.1 = 0.5
x = runif(n)
eta = beta.0 +  beta.1*x
y = rnorm(n,eta,sigma)
#plot(x,y) #plot the data
my.data = data.frame(y=y,x=x)
library(INLA)
formula = y ~ 1 + x
output = inla(formula, family="gaussian", data=my.data, control.compute=list(dic=TRUE))
output$dic
setwd("~/VIBASS/Practicals/Tutorial_1b"))
setwd("~/VIBASS/Practicals/Tutorial_1b")
setwd("~/Dropbox/Books/INLABook/ShortCourse/VIBASS/Practical1b")
library(INLA)         # Integrated Nested Laplace Approximation package
library(dplyr)        # A package for data manipulation
library(sf)           # Simple feature for R
library(spdep)        # Functions and tests for evaluating spatial patterns
# and autocorrelation
library(SpatialEpi)   # Methods and data for spatial epidemiology
# Packages used for visualization
library(RColorBrewer) # A package providing colour palettes for shading maps
# and other plots
library(tmap)         # A package for static and interactive maps
library(ggplot2)      # A package that implements the grammar of graphics, which is a term used to
# break up graphs into semantic components, such as geometries and layers.
library(mapview)      # A package for interactive maps
library(cowplot)      # Add-on to ggplot. It provides features that help us with creating
# publication-quality figures
LTLA <- st_read("LTLA_shp.shp")
class(LTLA)
COVID19Deaths <- read.csv("COVID19Deaths.csv", header = TRUE)
COVID19Deaths$SMR <- COVID19Deaths$O/COVID19Deaths$E
names(LTLA)
LTLA
LTLA$LTLA
LTLA <- st_read("Practical1b/LTLA_shp.shp")
names(LTLA)
